<?xml version="1.0" encoding="UTF-8"?><record_update table="x_snc_reactor_component">
    <x_snc_reactor_component action="INSERT_OR_UPDATE">
        <content_css/>
        <dependencies>099c24e61b4fa510cd6153d16b4bcb7a,59aa28661b4fa510cd6153d16b4bcb38,f5d7d9261bcfa510cd6153d16b4bcb15,eb1de5e21b03e510cd6153d16b4bcb6b,f5be6c2c97d36110a6a07767f053afa5,9861d5311bd7e110cd6153d16b4bcb73,95aa25b11b1be110cd6153d16b4bcb0f,acf063451b1469905b76777d8b4bcbb2,035b03ea1b57a510cd6153d16b4bcb0b,1fb0773edb92d110f359c1911596194d,9d00ba2ec319da105a37f907050131d0,e622c12d8375da1000d5ccc0deaad39d</dependencies>
        <description>The IDE Controller React component. The IDE Controller component manages the overall state of the IDE, allows to select an app and keeps track on which app is displayed.</description>
        <jsx>false</jsx>
        <module>false</module>
        <name>RIDEController</name>
        <role>controller</role>
        <script><![CDATA[class RIDEController extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		
		var strAppId = GetStringValue(this.props.app_id);
		var strState = 'select';
				
		var aTabs = null;
		var strCurrentTab = '';
		
		if (strAppId != '')
		{
			strState = 'edit';
			strCurrentTab = 'sys_app,'+strAppId,
			aTabs = [strCurrentTab];
		}
		
		this.state = {
			state: strState,
			app_id: strAppId,
			app_data: null,
			filter: '',
			currenttab: strCurrentTab,
			tabs: aTabs
		};

		this.title = 'R-IDE';
	}
	
	callbackSelectApp(strAppSysId)
	{
		if (this.state.app_id == strAppSysId)
		{
			this.setState(
				{
					state: 'edit'
				});
			return;
		}
		var strCurrentTab = 'sys_app,'+strAppSysId;
		this.setState(
			{
				state: 'edit',
				app_id: strAppSysId,
				app_data: null,
				currenttab: strCurrentTab,
				tabs: [strCurrentTab]
			});
	}
	
	onServerRequestGetAppData(appdata)
	{
		this.setState(
			{
				state: 'edit',
				app_data: appdata
			}
		);
	}

	callbackToolBar(strValue)
	{
		if (strValue == 'app_select')
		{
			this.setState(
				{
					state: 'select'
				});
			return;
		}
		if (strValue == 'app_form')
		{
			this.openTab('sys_app,'+this.state.app_data.sys_id);
			return;
		}		
		if (strValue == 'file_create')
		{
			DoModalMessage(this.title,'TODO: A file is to be created...',function(){});
			return;
		}
		if (strValue == 'manual')
		{
			var strManual = GetValue(this.state.app_data,'manual');
			if (IsValidSysId(strManual))
			{
				this.openTab('sys_ui_page,'+strManual);
				return;
			}
			DoModalMessage(this.title,'The manual UI Page can no longer be found!',function(){});
			return;
		}	
		if (strValue == 'testsuite')
		{
			var strTestSuite = GetValue(this.state.app_data,'default_test_suite');
			if (IsValidSysId(strTestSuite))
			{
				this.openTab('sys_atf_test_suite,'+strTestSuite);
				return;
			}
			DoModalMessage(this.title,'The manual UI Page can no longer be found!',function(){});
			return;
		}					
		if (strValue == 'backgroundscript')
		{
			RedirectToUrl('/sys.scripts.modern.do',true);
			return;
		}			
		if (strValue == 'repo_link')
		{
			RedirectToUrl(this.state.app_data.x_snc_devtools_repo_url,true);
			return;
		}		
		if (strValue == 'apiref_link')
		{
			RedirectToUrl('https://developer.servicenow.com/dev.do#!/reference/',true);
			return;
		}
		if (strValue == 'clear_cache')
		{
			function ClearCache(bReady)
			{
				if (bReady == true)
				{
					RedirectToUrl('/cache.do',true);
					return;
				}
			}
			DoModalConfirm(this.title,'Ready to clear the cache?',ClearCache)
			return;
		}			
		if (strValue == 'fontawesome_link')
		{
			RedirectToUrl('https://fontawesome.com/v4/icons/',true);
			return;
		}	
		if (strValue == 'transactions')
		{
			RedirectToUrl('/loading_transactions.do',true);
			return;
		}				
		/*
		if (strValue == 'error')
		{
			DoModalMessage(this.title,'Provoking an error...',function(){});
			this.setState(
				{
					state: 'error'
				});			
			return;
		}*/
		DoModalMessage(this.title,'TODO: Not supported toolbar icon...',function(){});

	}
	
	callbackTreeNavigation(strValue)
	{
		this.openTab(strValue);
	}
	
	onInputFilter()
	{
		var strValue = GetStringValue(event.target.value);
		this.setState({ filter: strValue });
	}

	openTab(strTab)
	{
		var strTab = GetStringValue(strTab);
		var aTabs = GetArrayValue(this.state.tabs);
		aTabs = ArrayPushUnique(aTabs,strTab);
		this.setState(
			{
				currenttab: strTab,
				tabs: aTabs 
			});
	}
	
	closeTab(strTabToClose)
	{
		var strTabToClose = GetStringValue(strTabToClose);
		var strCurrentTab = this.state.currenttab;
		var aTabs = GetArrayValue(this.state.tabs);

		if (aTabs.length == 0)
		{
			this.setState(
				{
					currenttab: ''
				});
			return;
		}
		if (aTabs.length == 1)
		{
			this.setState(
				{
					currenttab: '',
					tabs: []
				});
			return;
		}

		if (strCurrentTab != strTabToClose)
		{
			aTabs = ArrayRemoveValue(aTabs,strTabToClose);
			this.setState(
				{
					tabs: aTabs 
				});
			return;
		}

		var nCurrentTab = -1;
		for (var nTab = 0; nTab < aTabs.length; nTab++)
		{
			if (strCurrentTab == aTabs[nTab])
			{
				nCurrentTab = nTab;
			}
		}
		if (nCurrentTab != -1)
		{
			if (nCurrentTab == 0)
			{
				strCurrentTab = GetValue(aTabs,1);
			}
			else 
			{
				strCurrentTab = GetValue(aTabs, nCurrentTab - 1);	
			}
		}
		aTabs = ArrayRemoveValue(aTabs,strTabToClose);
		this.setState(
			{
				currenttab: strCurrentTab,
				tabs: aTabs 
			});

	}

	render()
	{
		var strState = GetStringValue(this.state.state);
		var strAppId = GetStringValue(this.state.app_id);
		var appdata = this.state.app_data;
		
		if (strAppId == '')
		{
			strState = 'select';
		}
		if (strState == 'edit')
		{
			if (IsObject(appdata) == false)
			{
				strState = 'loading';
			}
		}
		
		
		if (strState == 'select')
		{
			return e(Fullscreen,{},e(Centered,{},e(RIDEAppSelectorController,{ app_id: strAppId, callbackSelectApp: this.callbackSelectApp })));			
		}
		else if (strState == 'loading')
		{
			ServerRequest('x_snc_ride.RIDEClientAPI','GetAppData',{ app_id: strAppId },this.onServerRequestGetAppData);
			return e(Fullscreen,{},e(Centered,{},e(Waiting,{ text: 'Loading App...' })));
		}
		else if (strState == 'edit')
		{
			var strAppNameVersion = appdata.name + ' ' + appdata.version;
					
			// Logo
			var logo = e('div',
				{
					style:
					{
						fontWeight: 'bold',
						fontSize: '16px',
						margin: '5px'
					}
				},
				this.title + ' - ' + appdata.name_clean);
			
			// Menu
			
			// User
			
			// ToolBar
			var tools = [];
			tools.push({
					text: 'Load App',
					icon: 'folder-open',
					value: 'app_select'
				});
			tools.push({
					text: 'App Settings',
					icon: 'gear',
					value: 'app_form'
				});			
			tools.push({
					text: 'Create Application File',
					icon: 'plus-circle',
					value: 'file_create'
				});
			
			if (IsValidSysId(appdata.manual) == true)
			{
				tools.push({
						text: 'Manual',
						icon: 'file-o',
						value: 'manual'
					});
			}

			if (IsValidSysId(appdata.default_test_suite) == true)
			{
				tools.push({
						text: 'Test Suite',
						icon: 'life-saver',
						value: 'testsuite'
					});
			}			
			
			tools.push({
					text: 'Background Script',
					icon: 'code',
					value: 'backgroundscript'
				});

			tools.push({
					text: 'Clear Cache',
					icon: 'shower',
					value: 'clear_cache'
				});		

			tools.push({
					text: 'Active Transactions',
					icon: 'tasks',
					value: 'transactions'
				});						

			if (IsValidUrl(appdata.x_snc_devtools_repo_url) == true)
			{
				tools.push({
						text: '',
						icon: 'code-fork',
						value: 'repo_link'
					});
			}
			tools.push({
					text: '',
					icon: 'user-circle',
					value: 'apiref_link'
				});			
			tools.push({
					text: '',
					icon: 'font-awesome',
					value: 'fontawesome_link'
				});
/*
			tools.push({
					text: 'Provoke Error',
					value: 'error'
				});
*/			
			
			// Leftbar header
			var leftbarheader = e('input',
				{
					onInput: this.onInputFilter,
					value: this.state.filter
				});
			
			// TreeNavigation
			var treenavigation = e(RIDETreeNavigationController,
				{
					appdata: appdata,
					callbackOnClick: this.callbackTreeNavigation,
					filter: this.state.filter
				});
			
			// Content Area
			var strCurrentTab = GetStringValue(this.state.currenttab);
			var aTabs = GetArrayValue(this.state.tabs);
			var metadata = this.state.app_data._metadata;

			var aItems = [];
			for (var nTab = 0; nTab < aTabs.length; nTab++)
			{
				var strTab = aTabs[nTab];
				var aValue = strTab.split(',');
				var strClassName = GetValue(aValue,0);
				var strSysId = GetValue(aValue,1);
				var strContentUrl = '/'+strClassName+'.do?sys_id='+strSysId; 

				var label = strClassName + ' - ' + strSysId;
				
				var file = GetValue(metadata,strSysId);
				if (file != null)
				{
					label = e('span',
						{
							style: { pointerEvents: 'none' }
						},
						[
							file.display,
							e('br'),
							strClassName
						]);
				}
				else if (this.state.app_data.sys_id == strSysId)
				{
					label = 'App Settings';
				}

				var iframe = e(IFrame,{url: strContentUrl});
				aItems.push(
					{
						label: label,
						value: strTab,
						content: iframe
					}
				);
			}

			var tabcontainer = e(TabContainer,
				{
					items: aItems,
					value: strCurrentTab,
					callbackOnSelect: this.openTab,
					callbackOnClose: this.closeTab
				});

			var content = tabcontainer;
	

			// Status Bar
			var strStatus = strAppNameVersion;		
			var status = e('span',{},strStatus);

			var workspace = e(Workspace,{
				logo: logo,
				menu: null,
				user: null,
				toolbar: e(ToolBar, { tools: tools, callbackOnClick: this.callbackToolBar }),
				leftbarheader: leftbarheader,
				treenavigation: treenavigation,
				content: content,
				sidebar: null,
				status: status 
			});

			return workspace;
		}
		return e(ErrorMessage,{ text: 'ERROR: INVALID STATE' });
	}	
}]]></script>
        <source_type>ui_script</source_type>
        <sys_class_name>x_snc_reactor_component</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-29 09:49:32</sys_created_on>
        <sys_id>0472042a1bcba510cd6153d16b4bcb21</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>RIDEController</sys_name>
        <sys_package display_value="R-IDE WORK IN PROGRESS" source="x_snc_ide">b598b2161b2e2510cd6153d16b4bcb08</sys_package>
        <sys_policy/>
        <sys_scope display_value="R-IDE WORK IN PROGRESS">b598b2161b2e2510cd6153d16b4bcb08</sys_scope>
        <sys_update_name>x_snc_reactor_component_0472042a1bcba510cd6153d16b4bcb21</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-10 21:11:55</sys_updated_on>
        <type>script</type>
        <ui_script display_value="x_snc_ride.RIDEController">19d1c4e61bcba510cd6153d16b4bcb8c</ui_script>
        <url/>
    </x_snc_reactor_component>
</record_update>
