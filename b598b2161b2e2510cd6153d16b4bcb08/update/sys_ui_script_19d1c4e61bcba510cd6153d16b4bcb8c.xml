<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>The RIDE Controller React component. The RIDE Controller component manages the overall state of the R-IDE, allows to select a scope and keeps track on which scope is displayed.</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_ride.RIDEController</name>
        <script><![CDATA[class RIDEController extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		
		var strAppSysId = GetStringValue(this.props.app_sys_id);
		var strState = 'select';
				
		var aTabs = null;
		var strCurrentTab = '';
		
		if (strAppSysId != '')
		{
			strState = 'edit';
			strCurrentTab = 'sys_app,'+strAppSysId,
			aTabs = [strCurrentTab];
		}
		
		this.state = {
			state: strState,
			app_sys_id: strAppSysId,
			app_data: null,
			filter: '',
			currenttab: strCurrentTab,
			tabs: aTabs
		};

		this.title = 'R-IDE';
	}
	
	callbackSelectApp(strAppSysId)
	{
		if (this.state.app_sys_id == strAppSysId)
		{
			this.setState(
				{
					state: 'edit'
				});
			return;
		}
		var strCurrentTab = 'sys_app,'+strAppSysId;
		this.setState(
			{
				state: 'edit',
				app_sys_id: strAppSysId,
				app_data: null,
				currenttab: strCurrentTab,
				tabs: [strCurrentTab]
			});
	}

	loadAppData()
	{
		ServerRequest(
			'x_snc_ride.RIDEClientAPI',
			'GetAppData',
			{
				app_sys_id: this.state.app_sys_id
			},
			this.onServerRequestGetAppData);
	}
	
	onServerRequestGetAppData(appdata)
	{
		if (this.state.state == 'loading')
		{
			this.setState(
				{
					state: 'edit',
					app_data: appdata
				}
			);
			return;
		}
		DoModalMessage(this.title,'Refreshing outside loading: '+this.state.state,function(){});
		this.setState(
			{
				app_data: appdata
			}
		);
	}

	callbackToolBar(strValue)
	{
		if (strValue == 'app_select')
		{
			this.setState(
				{
					state: 'select'
				});
			return;
		}
		if (strValue == 'app_refresh')
		{
			this.loadAppData();
			return;
		}		
		if (strValue == 'app_form')
		{
			this.openTab('sys_app,'+this.state.app_data.sys_id);
			return;
		}		
		if (strValue == 'file_create')
		{
			this.createFile()
			return;
		}
		if (strValue == 'manual')
		{
			var strManual = GetValue(this.state.app_data,'manual');
			if (IsValidSysId(strManual))
			{
				this.openTab('sys_ui_page,'+strManual);
				return;
			}
			DoModalMessage(this.title,'The manual UI Page can no longer be found!',function(){});
			return;
		}	
		if (strValue == 'testsuite')
		{
			var strTestSuite = GetValue(this.state.app_data,'default_test_suite');
			if (IsValidSysId(strTestSuite))
			{
				this.openTab('sys_atf_test_suite,'+strTestSuite);
				return;
			}
			DoModalMessage(this.title,'The manual UI Page can no longer be found!',function(){});
			return;
		}					
		if (strValue == 'backgroundscript')
		{
			RedirectToUrl('/sys.scripts.modern.do',true);
			return;
		}			
		if (strValue == 'repo_link')
		{
			RedirectToUrl(this.state.app_data.x_snc_devtools_repo_url,true);
			return;
		}		
		if (strValue == 'apiref_link')
		{
			RedirectToUrl('https://developer.servicenow.com/dev.do#!/reference/',true);
			return;
		}
		if (strValue == 'clear_cache')
		{
			function ClearCache(bReady)
			{
				if (bReady == true)
				{
					RedirectToUrl('/cache.do',true);
					return;
				}
			}
			DoModalConfirm(this.title,'Ready to clear the cache?',ClearCache)
			return;
		}			
		if (strValue == 'fontawesome_link')
		{
			RedirectToUrl('https://fontawesome.com/v4/icons/',true);
			return;
		}	
		if (strValue == 'transactions')
		{
			RedirectToUrl('/loading_transactions.do',true);
			return;
		}				
		/*
		if (strValue == 'error')
		{
			DoModalMessage(this.title,'Provoking an error...',function(){});
			this.setState(
				{
					state: 'error'
				});			
			return;
		}*/
		DoModalMessage(this.title,'TODO: Not supported toolbar icon...',function(){});

	}
	
	callbackTreeNavigation(strValue)
	{
		this.openTab(strValue);
	}
	
	onInputFilter()
	{
		var strValue = GetStringValue(event.target.value);
		this.setState({ filter: strValue });
	}

	openTab(strTab)
	{
		var strTab = GetStringValue(strTab);
		var aTabs = GetArrayValue(this.state.tabs);
		aTabs = ArrayPushUnique(aTabs,strTab);
		this.setState(
			{
				currenttab: strTab,
				tabs: aTabs,
				state: 'edit'
			});
	}
	
	closeTab(strTabToClose)
	{
		var strTabToClose = GetStringValue(strTabToClose);
		var strCurrentTab = this.state.currenttab;
		var aTabs = GetArrayValue(this.state.tabs);

		if (aTabs.length == 0)
		{
			this.setState(
				{
					currenttab: ''
				});
			return;
		}
		if (aTabs.length == 1)
		{
			this.setState(
				{
					currenttab: '',
					tabs: []
				});
			return;
		}

		if (strCurrentTab != strTabToClose)
		{
			aTabs = ArrayRemoveValue(aTabs,strTabToClose);
			this.setState(
				{
					tabs: aTabs 
				});
			return;
		}

		var nCurrentTab = -1;
		for (var nTab = 0; nTab < aTabs.length; nTab++)
		{
			if (strCurrentTab == aTabs[nTab])
			{
				nCurrentTab = nTab;
			}
		}
		if (nCurrentTab != -1)
		{
			if (nCurrentTab == 0)
			{
				strCurrentTab = GetValue(aTabs,1);
			}
			else 
			{
				strCurrentTab = GetValue(aTabs, nCurrentTab - 1);	
			}
		}
		aTabs = ArrayRemoveValue(aTabs,strTabToClose);
		this.setState(
			{
				currenttab: strCurrentTab,
				tabs: aTabs 
			});
	}

	createFile()
	{
		/*
		this.setState(
			{
				state: 'create_file'
			});
		*/
		this.openTab('new');
	}

	onCreateFileCancel()
	{
		this.setState(
			{
				state: 'edit'
			});
	}

	onCreateFileComplete(record)
	{
		var strTab = record.sys_class_name + ',' + record.sys_id;
		var aTabs = GetArrayValue(this.state.tabs);
		aTabs = ArrayRemoveValue(aTabs,'new');
		aTabs = ArrayPushUnique(aTabs,strTab);
		this.setState(
			{
				currenttab: strTab,
				tabs: aTabs,
				state: 'edit',
				app_data: null
			});
		
	}

	render()
	{
		var strState = GetStringValue(this.state.state);
		var strAppSysId = GetStringValue(this.state.app_sys_id);
		var appdata = this.state.app_data;
		
		if (strAppSysId == '')
		{
			strState = 'select';		
		}


		if (strState == 'select')
		{
			var appselector = e(RIDEAppSelectorController,
				{
					app_sys_id: strAppSysId,
					callbackSelectApp: this.callbackSelectApp
				});
			return e(Fullscreen,{},e(Centered,{},appselector));			
		}
		else if (strState == 'loading')
		{
			this.loadAppData();
			return e(Fullscreen,{},e(Centered,{},e(Waiting,{ text: 'Loading App...' })));
		}
		else if (strState == 'edit' || strState == 'create_file')
		{
			if (IsObject(appdata) == false)
			{
				this.setState( { state: 'loading' });
				return;
			}

			var strAppNameVersion = appdata.name + ' ' + appdata.version;
					
			// Logo
			var logo = e('div',
				{
					style:
					{
						fontWeight: 'bold',
						fontSize: '16px',
						margin: '5px'
					}
				},
				this.title + ' - ' + appdata.name_clean);
			
			// Menu
			
			// User
			
			// ToolBar
			var tools = [];
			tools.push({
					text: 'Load App',
					icon: 'folder-open',
					value: 'app_select'
				});
			tools.push({
					text: '',
					icon: 'refresh',
					value: 'app_refresh'
				});				
			tools.push({
					text: 'App Settings',
					icon: 'gear',
					value: 'app_form'
				});			
			tools.push({
					text: 'Create Application File',
					icon: 'plus-circle',
					value: 'file_create'
				});
			
			if (IsValidSysId(appdata.manual) == true)
			{
				tools.push({
						text: 'Manual',
						icon: 'file-o',
						value: 'manual'
					});
			}

			if (IsValidSysId(appdata.default_test_suite) == true)
			{
				tools.push({
						text: 'Test Suite',
						icon: 'life-saver',
						value: 'testsuite'
					});
			}			
			
			tools.push({
					text: 'Background Script',
					icon: 'code',
					value: 'backgroundscript'
				});

			tools.push({
					text: 'Clear Cache',
					icon: 'shower',
					value: 'clear_cache'
				});		

			tools.push({
					text: 'Active Transactions',
					icon: 'tasks',
					value: 'transactions'
				});						

			if (IsValidUrl(appdata.x_snc_devtools_repo_url) == true)
			{
				tools.push({
						text: '',
						icon: 'code-fork',
						value: 'repo_link'
					});
			}
			tools.push({
					text: '',
					icon: 'user-circle',
					value: 'apiref_link'
				});			
			tools.push({
					text: '',
					icon: 'font-awesome',
					value: 'fontawesome_link'
				});
/*
			tools.push({
					text: 'Provoke Error',
					value: 'error'
				});
*/			
			
			// Leftbar header
			var leftbarheader = e('input',
				{
					onInput: this.onInputFilter,
					value: this.state.filter
				});
			
			// TreeNavigation
			var treenavigation = e(RIDETreeNavigationController,
				{
					appdata: appdata,
					callbackOnClick: this.callbackTreeNavigation,
					filter: this.state.filter
				});
			
			// Content Area
			var content = null;

			if (strState == 'create_file')
			{
				content = e(RIDECreateFileController,
					{
						app_sys_id: strAppSysId,
						callbackOnCancel: this.onCreateFileCancel,
						callbackOnFileCreated: this.onCreateFileComplete
					});
			}
			else
			{
				var strCurrentTab = GetStringValue(this.state.currenttab);
				var aTabs = GetArrayValue(this.state.tabs);
				var metadata = this.state.app_data._metadata;

				var aItems = [];
				for (var nTab = 0; nTab < aTabs.length; nTab++)
				{
					var strTab = aTabs[nTab];

					var label = null;
					var tabcontent = null;
					if (strTab == 'new')
					{
						label = 'Create File';
						tabcontent = e(RIDECreateFileController,
						{
							app_sys_id: strAppSysId,
							callbackOnCancel: this.onCreateFileCancel,
							callbackOnFileCreated: this.onCreateFileComplete
						});
					}
					else
					{
						var aValue = strTab.split(',');
						var strClassName = GetValue(aValue,0);
						var strSysId = GetValue(aValue,1);
						var strContentUrl = '/'+strClassName+'.do?sys_id='+strSysId; 

						label = strClassName + ' - ' + strSysId;
						
						var file = GetValue(metadata,strSysId);
						if (file != null)
						{
							label = e('span',
								{
									style: { pointerEvents: 'none' }
								},
								[
									file.display,
									e('br'),
									strClassName
								]);
						}
						else if (this.state.app_data.sys_id == strSysId)
						{
							label = 'App Settings';
						}
						var iframe = e(IFrame,{url: strContentUrl});
						tabcontent = iframe;
					}

					
					aItems.push(
						{
							label: label,
							value: strTab,
							content: tabcontent
						}
					);
				}

				var tabcontainer = e(TabContainer,
					{
						items: aItems,
						value: strCurrentTab,
						callbackOnSelect: this.openTab,
						callbackOnClose: this.closeTab
					});
				
				content = tabcontainer;
			}
	

			// Status Bar
			var strStatus = strAppNameVersion;		
			var status = e('span',{},strStatus);

			var workspace = e(Workspace,{
				logo: logo,
				menu: null,
				user: null,
				toolbar: e(ToolBar, { tools: tools, callbackOnClick: this.callbackToolBar }),
				leftbarheader: leftbarheader,
				treenavigation: treenavigation,
				content: content,
				sidebar: null,
				status: status 
			});

			return workspace;
		}
		return e(ErrorMessage,{ text: 'ERROR: INVALID STATE' });
	}	
}]]></script>
        <script_name>RIDEController</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-29 09:47:59</sys_created_on>
        <sys_id>19d1c4e61bcba510cd6153d16b4bcb8c</sys_id>
        <sys_mod_count>216</sys_mod_count>
        <sys_name>x_snc_ride.RIDEController</sys_name>
        <sys_package display_value="R-IDE WORK IN PROGRESS" source="x_snc_ide">b598b2161b2e2510cd6153d16b4bcb08</sys_package>
        <sys_policy/>
        <sys_scope display_value="R-IDE WORK IN PROGRESS">b598b2161b2e2510cd6153d16b4bcb08</sys_scope>
        <sys_update_name>sys_ui_script_19d1c4e61bcba510cd6153d16b4bcb8c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-15 06:39:57</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
        <x_snc_devtools_global>false</x_snc_devtools_global>
    </sys_ui_script>
</record_update>
