<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>The IDE Controller React component. The IDE Controller component manages the overall state of the IDE, allows to select a scope and keeps track on which scope is displayed.</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_ide.IDEController</name>
        <script><![CDATA[class IDEController extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		var strAppId = GetStringValue(this.props.app_id);
		var strState = 'select';
				
		if (strAppId != '')
		{
			strState = 'edit';
		}
		
		this.state = {
			state: strState,
			app_id: strAppId,
			app_data: null,
			filter: ''
		};
		
		BindAllFunctionsToThis(this);
	}
	
	callbackSelectApp(strAppSysId)
	{
		if (this.state.app_id == strAppSysId)
		{
			this.setState(
				{
					state: 'edit'
				});
			return;
		}
		this.setState(
			{
				app_data: null,
				app_id: strAppSysId,
				state: 'edit',
				content: null
			});
	}
	
	onServerRequestGetAppData(appdata)
	{
		this.setState(
			{
				state: 'edit',
				app_data: appdata
			}
		);
	}

	callbackToolBar(strValue)
	{
		if (strValue == 'app_select')
		{
			this.setState(
				{
					state: 'select'
				});
			return;
		}
		if (strValue == 'app_form')
		{
			this.setState( { content: 'sys_app,'+this.state.app_data.sys_id } );
			return;
		}		
		if (strValue == 'file_create')
		{
			DoModalMessage('IDE','TODO: A file is to be created...',function(){});
			return;
		}
		if (strValue == 'manual')
		{
			var aFiles = GetValue(this.state.app_data,'_metadata');
			for (var nFile = 0; nFile < aFiles.length; nFile++)
			{
				var file = aFiles[nFile];
				if (file.sys_name == 'manual' && file.sys_class_name == 'sys_ui_page')
				{
					this.setState( { content: 'sys_ui_page,'+file.sys_id } );
					return;
				}
			}
			DoModalMessage('IDE','The manual UI Page can no longer be found!',function(){});
			return;
		}			
		if (strValue == 'backgroundscript')
		{
			RedirectToUrl('/sys.scripts.do',true);
			return;
		}			
		if (strValue == 'repo_link')
		{
			RedirectToUrl(this.state.app_data.x_snc_devtools_repo_url,true);
			return;
		}		
		if (strValue == 'apiref_link')
		{
			RedirectToUrl('https://developer.servicenow.com/dev.do#!/reference/',true);
			return;
		}
		if (strValue == 'fontawesome_link')
		{
			RedirectToUrl('https://fontawesome.com/v4/icons/',true);
			return;
		}		
		/*
		if (strValue == 'error')
		{
			DoModalMessage('IDE','Provoking an error...',function(){});
			this.setState(
				{
					state: 'error'
				});			
			return;
		}*/
		DoModalMessage('IDE','TODO: Not supported toolbar icon...',function(){});

	}
	
	callbackTreeNavigation(strValue)
	{
		strValue = GetStringValue(strValue);
		this.setState({ content: strValue });
	}
	
	onInputFilter()
	{
		var strValue = GetStringValue(event.target.value);
		this.setState({ filter: strValue });
	}

	
	render()
	{
		var strState = GetStringValue(this.state.state);
		var strAppId = GetStringValue(this.state.app_id);
		var appdata = this.state.app_data;
		
		if (strAppId == '')
		{
			strState = 'select';
		}
		if (strState == 'edit')
		{
			if (IsObject(appdata) == false)
			{
				strState = 'loading';
			}
		}
		
		
		if (strState == 'select')
		{
			return e(Fullscreen,{},e(Centered,{},e(IDEAppSelectorController,{ app_id: strAppId, callbackSelectApp: this.callbackSelectApp })));			
		}
		else if (strState == 'loading')
		{
			ServerRequest('x_snc_ide.IDEClientAPI','GetAppData',{ app_id: strAppId },this.onServerRequestGetAppData);
			return e(Fullscreen,{},e(Centered,{},e(Waiting,{ text: 'Loading App...' })));
		}
		else if (strState == 'edit')
		{
	
			var strAppNameVersion = appdata.name + ' ' + appdata.version;
					
			// Logo
			var logo = e('div',
				{
					style:
					{
						fontWeight: 'bold',
						fontSize: '16px',
						margin: '5px'
					}
				},
				'ServiceNow IDE - ' + appdata.name_clean);
			
			// Menu
			
			// User
			
			// ToolBar
			var tools = [];
			tools.push({
					text: 'Load App',
					icon: 'folder-open',
					value: 'app_select'
				});
			tools.push({
					text: 'App Settings',
					icon: 'gear',
					value: 'app_form'
				});			
			tools.push({
					text: 'Create Application File',
					icon: 'plus-circle',
					value: 'file_create'
				});
			
			var bManual = false;
			var aFiles = GetValue(appdata,'_metadata');
			for (var nFile = 0; nFile < aFiles.length; nFile++)
			{
				var file = aFiles[nFile];
				if (file.sys_name == 'manual' && file.sys_class_name == 'sys_ui_page')
				{
					bManual = true;
					//console.log(aFiles[nFile]);
					break;
				}
			}

			if (bManual == true)
			{
				tools.push({
						text: 'Manual',
						icon: 'file-o',
						value: 'manual'
					});
			}
			
			tools.push({
					text: 'Background Script',
					icon: 'code',
					value: 'backgroundscript'
				});
			if (IsValidUrl(appdata.x_snc_devtools_repo_url) == true)
			{
				tools.push({
						text: '',
						icon: 'code-fork',
						value: 'repo_link'
					});
			}
			tools.push({
					text: '',
					icon: 'user-circle',
					value: 'apiref_link'
				});			
			tools.push({
					text: '',
					icon: 'font-awesome',
					value: 'fontawesome_link'
				});
/*
			tools.push({
					text: 'Provoke Error',
					value: 'error'
				});
*/			
			
			// Leftbar header
			var leftbarheader = e('input',
				{
					onInput: this.onInputFilter,
					value: this.state.filter
				});
			
			// TreeNavigation
			var treenavigation = e(IDETreeNavigationController,
				{
					appdata: appdata,
					callbackOnClick: this.callbackTreeNavigation,
					filter: this.state.filter
				});
			
			// Content Area
			var strContent = GetStringValue(this.state.content);
			if (strContent == '')
			{
				strContent = 'sys_app,'+appdata.sys_id;
			}
			var iframe = null;
			if (strContent != '')
			{
				var aValue = strContent.split(',');
				var strClassName = GetValue(aValue,0);
				var strSysId = GetValue(aValue,1);
				var strContentUrl = '/'+strClassName+'.do?sys_id='+strSysId; 
				iframe = e(IFrame,{url: strContentUrl});
			}			
			var content = iframe;
			
			// Status Bar
			var strStatus = strAppNameVersion;		
			var status = e('span',{},strStatus);

			var workspace = e(Workspace,{
				logo: logo,
				menu: null,
				user: null,
				toolbar: e(ToolBar, { tools: tools, callbackOnClick: this.callbackToolBar }),
				leftbarheader: leftbarheader,
				treenavigation: treenavigation,
				content: iframe,
				sidebar: null,
				status: status 
			});

			return workspace;
		}
		return e(ErrorMessage,{ text: 'ERROR: INVALID STATE' });
	}	
}]]></script>
        <script_name>IDEController</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-29 09:47:59</sys_created_on>
        <sys_id>19d1c4e61bcba510cd6153d16b4bcb8c</sys_id>
        <sys_mod_count>108</sys_mod_count>
        <sys_name>x_snc_ide.IDEController</sys_name>
        <sys_package display_value="IDE WORK IN PROGRESS" source="x_snc_ide">b598b2161b2e2510cd6153d16b4bcb08</sys_package>
        <sys_policy/>
        <sys_scope display_value="IDE WORK IN PROGRESS">b598b2161b2e2510cd6153d16b4bcb08</sys_scope>
        <sys_update_name>sys_ui_script_19d1c4e61bcba510cd6153d16b4bcb8c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-02 14:43:17</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
