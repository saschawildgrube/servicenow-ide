<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_ride.GetAppData</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns an object representing the given application including an array of objects representing the sys_metadata records.</description>
        <name>GetAppData</name>
        <script><![CDATA[function GetAppData(vApp)
{
	var GetAppRecord = x_snc_devtools.GetAppRecord;
	var Clone = x_snc_devtools.Clone;
	var GetCleanAppName = x_snc_devtools.GetCleanAppName;
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var ArrayValueExists = x_snc_devtools.ArrayValueExists;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetRecord = x_snc_devtools.GetRecord;
	var GetKeys = x_snc_devtools.GetKeys;
	var GetValue = x_snc_devtools.GetValue;
	

	var grApp = GetAppRecord(vApp);
	if (IsValidRecord(grApp) == false)
	{
		return false;
	}
	
	var appdata = Clone(grApp);
	
	appdata.name_clean = GetCleanAppName(appdata.name);
	appdata._metadata = {};


	var grRepo = new GlideRecord('sys_repo_config');
	grRepo.addQuery('sys_app','=',grApp.sys_id);
	grRepo.query();
	if (grRepo.next())
	{
		appdata.repo_config_sys_id = GetStringValue(grRepo.sys_id);
	}	
	
	var aIgnoredClasses = GetSecondaryRecordTables();
	
	var attributes = GetClassAttributes();

	var tableColumns = {
		collection:
		[
			'sys_script',
			'sysevent_email_action' 
		],
		table:
		[
			'sys_ui_action',
			'sys_ui_policy',
			'sysevent_in_email_action'
		],
		name:
		[
			'sys_ui_list',
			'sys_ui_style',
			'sys_ui_related_list',
			'sys_ui_list_control',
			'sys_db_object',
			'sys_dictionary',
			'sys_dictionary_override',
			'sys_choice_set'
		],
		category:
		[
			'sys_number'
		],
		m2m_table:
		[
			'sys_m2m'
		]
	};	
	
	var grMetaData = new GlideRecord('sys_metadata');
	grMetaData.orderBy('sys_name');
	grMetaData.addQuery('sys_scope','=',grApp.sys_id);
	for (var nClass = 0; nClass < aIgnoredClasses.length; nClass++)
	{
		grMetaData.addQuery('sys_class_name','!=',aIgnoredClasses[nClass]);
	}
	grMetaData.query();
	while (grMetaData.next())
	{
		var strClassName = grMetaData.getValue('sys_class_name');
		var metadata = Clone(grMetaData);
		delete metadata.sys_scope;
		delete metadata.sys_package; 
		delete metadata.sys_meta;
		delete metadata.sys_update_name;

		metadata._attributes = GetValue(attributes,strClassName);

		var strDisplay = '';
		if (strClassName == 'sys_security_acl')
		{
			var grRecord = GetRecord(strClassName,metadata.sys_id);
			strDisplay = grRecord.name + ' - ' + grRecord.operation;
		}
		else if (strClassName == 'sys_dictionary')
		{
			var grRecord = GetRecord(strClassName,metadata.sys_id);
			strDisplay = grRecord.name;
			if (grRecord.element != '') 
			{
				strDisplay += '.' + grRecord.element;
			}
		}
		else if (strClassName == 'sys_dictionary_override')
		{
			var grRecord = GetRecord(strClassName,metadata.sys_id);
			strDisplay = grRecord.name + '.' + grRecord.element;
		}		
		else if (strClassName == 'sys_ui_list')
		{
			var grRecord = GetRecord(strClassName,metadata.sys_id);
			var strParent = GetStringValue(grRecord.parent);
			if (strParent != '')
			{
				strParent = ' (' + strParent + ')';
			}
			strDisplay = grRecord.name + ' - ' + grRecord.view.getDisplayValue() + strParent;
		}
		else if (strClassName == 'sys_filter')
		{
			var grRecord = GetRecord(strClassName,metadata.sys_id);
			strDisplay = grRecord.table + ': ' + grRecord.title; 
		}
		else
		{
			strDisplay = GetStringValue(grMetaData.getDisplayValue());
			if (strDisplay == '')
			{
				strDisplay = grMetaData.getValue('sys_id');
			}
		}
		metadata.display = strDisplay;
		
		var aColumns = GetKeys(tableColumns);
		for (var nColumn = 0; nColumn < aColumns.length; nColumn++)
		{
			var strColumn = aColumns[nColumn];
			if (ArrayValueExists(tableColumns[strColumn],strClassName) == true)
			{
				var grRecord = GetRecord(strClassName,metadata.sys_id);
				metadata['_table'] = GetStringValue(grRecord.getValue(strColumn));
			}	
		}
		appdata._metadata[metadata.sys_id] = metadata;

		if (strClassName == 'sys_ui_page' && metadata.sys_name == 'manual')
		{
			appdata.manual = metadata.sys_id;
		}
		if (strClassName == 'sys_atf_test_suite' && metadata.sys_name == appdata.name_clean)
		{
			appdata.default_test_suite = metadata.sys_id;
		}
	}

	return appdata;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-03 10:19:49</sys_created_on>
        <sys_id>9169bd0c975bed10a6a07767f053af85</sys_id>
        <sys_mod_count>76</sys_mod_count>
        <sys_name>GetAppData</sys_name>
        <sys_package display_value="R-IDE WORK IN PROGRESS" source="x_snc_ide">b598b2161b2e2510cd6153d16b4bcb08</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="R-IDE WORK IN PROGRESS">b598b2161b2e2510cd6153d16b4bcb08</sys_scope>
        <sys_update_name>sys_script_include_9169bd0c975bed10a6a07767f053af85</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-07 23:38:57</sys_updated_on>
    </sys_script_include>
</record_update>
