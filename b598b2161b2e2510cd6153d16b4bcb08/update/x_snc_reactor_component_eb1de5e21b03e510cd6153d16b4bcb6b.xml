<?xml version="1.0" encoding="UTF-8"?><record_update table="x_snc_reactor_component">
    <x_snc_reactor_component action="INSERT_OR_UPDATE">
        <content_css/>
        <dependencies>9191395fdbd21510f359c191159619ef,8572ee00971fed10a6a07767f053af21,ae6ec01c97172110a6a07767f053af56</dependencies>
        <description>Allows to select an existing app or to create a new one.</description>
        <jsx>false</jsx>
        <name>IDEAppSelectorController</name>
        <role>controller</role>
        <script><![CDATA[class IDEAppSelectorController extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		this.state = {
			scope: this.props.scope,
			apps: null
		};
		this.onServerRequestGetApps = this.onServerRequestGetApps.bind(this);
		this.onClickSelectApp = this.onClickSelectApp.bind(this);
	}
	
	onServerRequestGetApps(response)
	{
		Log('onServerRequestGetApps');
		this.setState(
			{
				apps: response
			}
		);
	}	
	
	onClickSelectApp()
	{
		var strAppSysId = GetStringValue(event.target.attributes.value.value);
		DoModalMessage('Hello','onClickSelectApp: ' + strAppSysId);
	}

	/*
	componentDidMount()
	{
	}

	componentWillUnmount()
	{
	}
	*/

	/*
	onClick()
	{
		this.setState( {clicked: true} );
		if (typeof this.props.callbackOnClick == 'function')
		{
			this.props.callbackOnClick();
		}
		else if (this.props.text != '')
		{
			DoModalMessage('New Reactor component',this.props.text);
		}
		else
		{
			DoModalMessage('New Reactor component','The button was clicked!');
		}
	}
	*/

	render()
	{
		var aApps = GetArrayValue(this.state.apps);
		if (aApps.length == 0)
		{
			ServerRequest('x_snc_ide.IDEClientAPI','GetApps',{ },this.onServerRequestGetApps);
			return e(Waiting,{ text: 'Loading Apps...' });
		}
		
		var aRows = [];
		
		var aHeaders = [
			{
				header: true,
				content: 'Name'
			}/*,
			{
				header: true,
				content: 'Version'
			}*/,
			{
				header: true,
				content: 'Scope'
			}
		];
		aRows.push(aHeaders);
		
		for (var nApp = 0; nApp < aApps.length; nApp++)
		{
			var app = aApps[nApp];
			var elementLink = e('a',
				{
					onClick: this.onClickSelectApp,
					value: app.sys_id
				},
				app.name_clean + ' ' + app.version);
			
			var aCells = [
				{ content: elementLink },
				{ content: app.scope }
			];

			
			aRows.push(aCells);
		}
		
		return e(TableComponent,{ cells: aRows, classname: 'ide_app_selector' },null);
	}	
}]]></script>
        <source_type>ui_script</source_type>
        <sys_class_name>x_snc_reactor_component</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-29 17:35:42</sys_created_on>
        <sys_id>eb1de5e21b03e510cd6153d16b4bcb6b</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>IDEAppSelectorController</sys_name>
        <sys_package display_value="IDE WORK IN PROGRESS" source="x_snc_ide">b598b2161b2e2510cd6153d16b4bcb08</sys_package>
        <sys_policy/>
        <sys_scope display_value="IDE WORK IN PROGRESS">b598b2161b2e2510cd6153d16b4bcb08</sys_scope>
        <sys_update_name>x_snc_reactor_component_eb1de5e21b03e510cd6153d16b4bcb6b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-03 21:11:25</sys_updated_on>
        <type>script</type>
        <ui_script display_value="x_snc_ide.IDEAppSelectorController">77aca1e21b03e510cd6153d16b4bcb9c</ui_script>
        <url/>
    </x_snc_reactor_component>
</record_update>
