<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>The RIDETreeNavigation component renders the R-IDE tree navigation based on the given app data object.</description>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_ride.RIDETreeNavigationController</name>
        <script><![CDATA[class RIDETreeNavigationController extends ReactorComponent
{
	constructor(props)
	{
		super(props);
	}

	onClick()
	{
		if (typeof this.props.callbackOnClick == 'function')
		{
			this.props.callbackOnClick();
		}
	}

	render()
	{
		var appdata = this.props.appdata;
		
		var treenavigation = { items: [] };
		
		//var tn_category = { label: 'By Category', items: [] };
		var tn_bytype = { label: 'By Type', items: [] };
		var tn_bytable = { label: 'By Table', items: [] };
		var tn_alphabetically = { label: 'By Name', items: [] };
		
		var metadata = GetValue(appdata,'_metadata');
		var aFiles = GetKeys(metadata);

		// Sort Alphabetically
		function CompareMetadataKeys(strSysId1,strSysId2)
		{
			var strName1 = GetValue(metadata,strSysId1,'display');
			var strName2 = GetValue(metadata,strSysId2,'display');
			return strName1.localeCompare(strName2);  
		}
		aFiles = aFiles.sort(CompareMetadataKeys);
		
		var itemsByTypes = {};
		var itemsByTables = {};
		for (var nFile = 0; nFile < aFiles.length; nFile++)
		{
			var file = GetValue(metadata,aFiles[nFile]);

			var strClassName = GetValue(file,'sys_class_name');
			var strSysId = GetValue(file,'sys_id');
			var strName = GetValue(file,'display');
			
			// All
			tn_alphabetically.items.push( { label: strName + ' ('+strClassName+')', value: strClassName+','+strSysId } );
			
			// By Type
			itemsByTypes = SetValue(strName,itemsByTypes,strClassName,strSysId);
			
			// By Table
			var strTable = GetValue(file,'_table');
			if (strTable != '')
			{
				itemsByTables = SetValue(strName,itemsByTables,strTable,strClassName,strSysId);
			}
			
		}
		
		var aClassNames = GetKeys(itemsByTypes);
		aClassNames.sort();
		for (var nClassName = 0; nClassName < aClassNames.length; nClassName++)
		{
			var strClassName = aClassNames[nClassName];
			var tn_files = { label: strClassName, items: [] };
			var itemsByType = itemsByTypes[strClassName];
			var aSysIds = GetKeys(itemsByType);
			for (var nSysId = 0; nSysId < aSysIds.length; nSysId++)
			{
				var strSysId = aSysIds[nSysId];
				var strName = GetValue(itemsByType,strSysId);
				tn_files.items.push( { label: strName, value: strClassName+','+strSysId } );
			}
			tn_bytype.items.push( tn_files );
		}

		var aTables = GetKeys(itemsByTables);
		aTables.sort();
		for (var nTable = 0; nTable < aTables.length; nTable++)
		{
			var strTable = aTables[nTable];
			var tn_bytable_bytype = { label: strTable, items: [] };
			var itemsByTable = itemsByTables[strTable];
			
			var aClassNames = GetKeys(itemsByTable);
			aClassNames.sort();
			for (var nClassName = 0; nClassName < aClassNames.length; nClassName++)
			{
				var strClassName = aClassNames[nClassName];
				var tn_files = { label: strClassName, items: [] };
				var itemsByTableByType = itemsByTable[strClassName];
				var aSysIds = GetKeys(itemsByTableByType);
				for (var nSysId = 0; nSysId < aSysIds.length; nSysId++)
				{
					var strSysId = aSysIds[nSysId];
					var strName = GetValue(itemsByTableByType,strSysId);
					tn_files.items.push( { label: strName, value: strClassName+','+strSysId } );
				}
				tn_bytable_bytype.items.push( tn_files );
			}			
			
			tn_bytable.items.push( tn_bytable_bytype );
		}		
		
		if (aTables.length > 0)
		{
			treenavigation.items.push( tn_bytable );
		}
		if (aClassNames.length > 0)
		{
			treenavigation.items.push( tn_bytype );
		}
		if (aFiles.length > 0)
		{
			treenavigation.items.push( tn_alphabetically );
		}

		return e(TreeNavigation,
			{
				treenavigation: treenavigation,
				filter: this.props.filter,
				filter_show: false,
				callbackOnClick: this.props.callbackOnClick,
				callbackOnFilterReset: this.props.callbackOnFilterReset,
				collapse_all_level: 1
			});
	}	
}]]></script>
        <script_name>RIDETreeNavigationController</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-11 10:42:25</sys_created_on>
        <sys_id>8fdacb2a1b57a510cd6153d16b4bcbb5</sys_id>
        <sys_mod_count>52</sys_mod_count>
        <sys_name>x_snc_ride.RIDETreeNavigationController</sys_name>
        <sys_package display_value="R-IDE" source="x_snc_ide">b598b2161b2e2510cd6153d16b4bcb08</sys_package>
        <sys_policy/>
        <sys_scope display_value="R-IDE">b598b2161b2e2510cd6153d16b4bcb08</sys_scope>
        <sys_update_name>sys_ui_script_8fdacb2a1b57a510cd6153d16b4bcbb5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-08 16:46:44</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
        <x_snc_devtools_global>false</x_snc_devtools_global>
    </sys_ui_script>
</record_update>
